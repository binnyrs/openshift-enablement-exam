---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: istio-mesh-tunnel
  namespace: {{ namespace }}
  labels:
    app: istio-mesh-tunnel
---
apiVersion: v1
kind: SecurityContextConstraints
metadata:
  annotations:
    kubernetes.io/description: 'privileged allows access to all privileged and host
      features and the ability to run as any user, any group, any fsGroup, and with
      any SELinux context.  WARNING: this is the most relaxed SCC and should be
      used only for cluster administration. Grant with caution.'
  creationTimestamp: null
  name: istio-mesh-tunnel
  labels:
  app: istio-mesh-tunnel  
allowHostDirVolumePlugin: true
allowHostIPC: true
allowHostNetwork: true
allowHostPID: true
allowHostPorts: true
allowPrivilegedContainer: true
allowedCapabilities:
- '*'
allowedFlexVolumes: null
defaultAddCapabilities: null
fsGroup:
  type: RunAsAny
groups:
- system:cluster-admins
- system:nodes
- system:masters
priority: 8
readOnlyRootFilesystem: false
requiredDropCapabilities: null
runAsUser:
  type: RunAsAny
seLinuxContext:
  type: RunAsAny
seccompProfiles:
- '*'
supplementalGroups:
  type: RunAsAny
users:
- system:serviceaccount:{{ namespace }}:istio-mesh-tunnel
volumes:
- '*'
{{% for node in cluster.nodes %}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ "istio-mesh-tunnel-"~split(node.name,'.')[0] }}
  namespace: {{ namespace }}
  labels:
    app: istio-mesh-tunnel
    node: {{ node.name }}
data:
  wireguard.config: |-
   [Interface]
   ListenPort = {{ tunnel_port }} 
   PrivateKey = {{ node.private_key }}
    
{{% for ext_cluster in clusters %}}
{{% if ext_cluster != cluster %}}
{{% for ext_node in ext_cluster.nodes %}}
   [Peer]
   PublicKey = {{ ext_node.public_key }}
   AllowedIPs = {{ ext_node.hostsubnet }}
   Endpoint = {{ext_node.publicip}}:{{ tunnel_port }}
   PersistentKeepalive = 25
   
{{% endfor %}}
{{% endfor %}}
    
---        
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  labels:
    app: istio-mesh-tunnel
    node: {{ node.name }}
  name: {{ "istio-mesh-tunnel-"~node.name.split('.')[0] }}
  namespace: {{ namespace }}
spec:
  selector:
    matchLabels:
      app: istio-mesh-tunnel
      node: {{ node.name }}
  template:
    metadata:
      labels:
        app: istio-mesh-tunnel
        node: {{ node.name }}
      name: {{ "istio-mesh-tunnel-"~node.name.split('.')[0] }}
    spec:
      containers:
      - env:
#        - name: TUNNEL_LOCAL_PEER
#          valueFrom:
#            fieldRef:
#              fieldPath: status.podIP
#        - name: TUNNEL_REMOTE_PEER
#          value: {{ .Values.tunnelRemotePeer}}   
#        - name: TUNNEL_CIDR
#          value: {{ .Values.tunnelCIDR }}
        - name: TUNNEL_DEV_NAME
          value: istio-mesh-tunnel  
#        - name: TUNNEL_PORT
#          value: '{{ .Values.tunnelPort }}'
        - name: TUNNEL_MODE
          value: wireguard
#        - name: TUNNEL_PEER_PUBLIC_KEY
#          value: '{{ .Values.tunnelPeerPublicKey }}'
#        - name: TUNNEL_PRIVATE_KEY
#          value: '{{ .Values.tunnelPrivateKey }}'
        - name: WIREGUARD_CONFIG
          value: /root/wireguard_config/wireguard.config                                                                 
        image: "{{ image }}"
        imagePullPolicy: Always
        name: istio-mesh-tunnel
        securityContext:
          privileged: true
        volumeMounts:
        - name: openvswitch
          mountPath: /var/run/openvswitch/db.sock
        - name: wireguard_config
          mountPath: /root/wireguard_config                                              
      serviceAccountName: istio-mesh-tunnel
      hostNetwork: false
      volumes:  
      - name: openvswitch
        hostPath: 
          path: /var/run/openvswitch/db.sock
          type: Socket
      - name: wireguard_config
        configmap: 
          name: {{ "istio-mesh-tunnel-"~node.name.split('.')[0] }}    
{{% endfor %}}      